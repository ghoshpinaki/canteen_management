ALTER TABLE `wallet_transaction` DROP INDEX `WTFK`,
ADD INDEX `WTFK1` USING BTREE(`EMPLOYEE_CODE`);

ALTER TABLE `wallet_transaction`
ADD COLUMN `ORGANIZATION_CODE`  varchar(12) NULL AFTER `EMPLOYEE_CODE`;

ALTER TABLE `cms_data`.`wallet_transaction` ADD CONSTRAINT `WTFK2` FOREIGN KEY `WTFK2` (`ORGANIZATION_CODE`)
REFERENCES `organization_master` (`ORGANIZATION_CODE`) ON DELETE RESTRICT ON UPDATE RESTRICT;

UPDATE wallet_transaction SET ORGANIZATION_CODE='OC/0001';

ALTER TABLE `cms_data`.`wallet_transaction` MODIFY COLUMN `ORGANIZATION_CODE` VARCHAR(12) CHARACTER SET latin1 COLLATE latin1_swedish_ci NOT NULL;

ALTER TABLE `cms_data`.`wallet_transaction` MODIFY COLUMN `TRANSACTION_DATE` DATETIME NOT NULL;


DELIMITER $$

DROP PROCEDURE IF EXISTS `WALLET_TRANSACTION_INSUPDEL` $$
CREATE PROCEDURE `WALLET_TRANSACTION_INSUPDEL`(
              IN TN BIGINT(20),
              IN EC VARCHAR(25),
              IN OC VARCHAR(12),
		IN TD DATETIME,
				      IN RA DECIMAL(10,2),
              IN RM VARCHAR(15),
              IN IO VARCHAR(20),
              IN ID VARCHAR(15),
              IN BN VARCHAR(15),
              IN BC VARCHAR(20),
			        IN FLAG INTEGER(1)
              )
BEGIN
    DECLARE TRANSACTIONNO BIGINT(20);
    DECLARE EMPLOYEECODE VARCHAR(25);
    DECLARE RECEIVEDAMOUNT DECIMAL(10,2);

	  DECLARE TRANSACTION_DATE_ERROR CONDITION FOR SQLSTATE '99001';
    DECLARE RECEIPT_MODE_ERROR CONDITION FOR SQLSTATE '99002';
    DECLARE UPDATE_ERROR CONDITION FOR SQLSTATE '99003';

    DECLARE CONTINUE HANDLER FOR TRANSACTION_DATE_ERROR
    RESIGNAL SET MESSAGE_TEXT = 'Transaction Date Should Not Be After Current Date.';

    DECLARE CONTINUE HANDLER FOR RECEIPT_MODE_ERROR
    RESIGNAL SET MESSAGE_TEXT = 'Valid Values For Receipt Mode Are:CASH,CHEQUE,DEMAND DRAFT,RTGS,NEFT,MONEY TRANSFER And ONLINE.';

    DECLARE CONTINUE HANDLER FOR UPDATE_ERROR
    RESIGNAL SET MESSAGE_TEXT = 'Employee Code Should Not Be Edited.';

    IF DATE(TD) > DATE(NOW()) THEN
      SIGNAL TRANSACTION_DATE_ERROR;
    ELSEIF UPPER(RM) NOT IN ('CASH','CHEQUE','DEMAND DRAFT','RTGS','NEFT','MONEY TRANSFER','ONLINE') THEN
      SIGNAL RECEIPT_MODE_ERROR;
    END IF;

  	IF FLAG = -1 THEN
       SELECT GENERATE_PRIMARY_KEY('walet_transaction') INTO TRANSACTIONNO;

       INSERT INTO wallet_transaction
       VALUES(TRANSACTIONNO,EC,OC,TD,RA,UPPER(RM),IO,ID,BN,BC);

       UPDATE employee_master
       SET CURRENT_BALANCE = CURRENT_BALANCE + RA
       WHERE EMPLOYEE_CODE=EC;
 	 END IF;

  	IF FLAG = 0 THEN
      SELECT EMPLOYEE_CODE,RECEIVED_AMOUNT
      INTO EMPLOYEECODE,RECEIVEDAMOUNT
      FROM wallet_transaction
      WHERE TRANSACTION_NO=TN;

      IF EC <> EMPLOYEECODE THEN
        SIGNAL UPDATE_ERROR;
      ELSE
        UPDATE wallet_transaction
		    SET EMPLOYEE_CODE=EC,ORGANIZATION_CODE=OC,TRANSACTION_DATE=TD,RECEIVED_AMOUNT=RA,RECEIPT_MODE=UPPER(RM),INSTRUMENT_NO=IO,
        INSTRUMENT_DATE=ID,BANK_NAME=BN,BRANCH=BC
        WHERE TRANSACTION_NO=TN;

        UPDATE employee_master
         SET CURRENT_BALANCE = CURRENT_BALANCE - RECEIVEDAMOUNT + RA
       WHERE EMPLOYEE_CODE=EC;
      END IF;
  	END IF;

  	IF FLAG = 1 THEN
       UPDATE employee_master
       SET CURRENT_BALANCE = CURRENT_BALANCE - RA
       WHERE EMPLOYEE_CODE=EC;

       DELETE FROM wallet_transaction WHERE TRANSACTION_NO=TN;
  	END IF;

END $$

DELIMITER ;

DELIMITER $$

DROP PROCEDURE IF EXISTS `USER_MASTER_INSUPDEL` $$
CREATE PROCEDURE `USER_MASTER_INSUPDEL`(
      IN UI VARCHAR(25),
      IN CB VARCHAR(25),
			IN UN VARCHAR(50),
      IN UT VARCHAR(25),
			IN PW VARCHAR(50),
      IN EM VARCHAR(50),
			IN RI VARCHAR(20),
			IN RD VARCHAR(25),
			IN FLAG INTEGER(1)

			)
BEGIN
	  DECLARE DATE_ERROR CONDITION FOR SQLSTATE '99001';
    DECLARE EMPTY_ERROR CONDITION FOR SQLSTATE '99002';
    DECLARE USER_TYPE_ERROR CONDITION FOR SQLSTATE '99003';

	  DECLARE CONTINUE HANDLER FOR DATE_ERROR
    RESIGNAL SET MESSAGE_TEXT = 'Registration Date Should Not Be After Current Date.';

  	DECLARE CONTINUE HANDLER FOR EMPTY_ERROR
  	RESIGNAL SET MESSAGE_TEXT = 'User Name,User Type,Password And Registering IP.';

  	DECLARE CONTINUE HANDLER FOR USER_TYPE_ERROR
  	RESIGNAL SET MESSAGE_TEXT = 'Valid Values For User Type Are:ADMINISTRATOR,HOD,EMPLOYEE,GENERAL USER,CANTEEN,HAWKER,OTHER.';

  	IF UN IN (' ','') OR UT IN (' ','') OR PW IN (' ','') OR RI IN (' ','') THEN
		  SIGNAL EMPTY_ERROR;
	  ELSEIF UPPER(UT) NOT IN  ('ADMINISTRATOR','HOD','EMPLOYEE','GENERAL USER','CANTEEN ISWP','CANTEEN JEMCO','HAWKER','OTHERS') THEN
      SIGNAL USER_TYPE_ERROR;
  	ELSEIF DATE(RD) > DATE(CURDATE()) THEN

		  SIGNAL DATE_ERROR;
	  END IF;

	  IF FLAG = -1 THEN
		  INSERT INTO user_master
		  VALUES(UI,CB,UN,UPPER(UT),PW,LOWER(EM),RI,DATE(RD));
	  END IF;

	  IF FLAG = 0 THEN
		  UPDATE user_master
		  SET CREATED_BY=CB,USER_NAME=UN,USER_TYPE=UPPER(UT),PASSWORD=PW,E_MAIL=LOWER(EM),REGISTERING_IP=RI,
      REGISTRATION_DATE=DATE(RD)
		  WHERE USER_ID=UI;
	  END IF;

	  IF FLAG = 1 THEN
		  DELETE FROM user_master WHERE USER_ID=UI;
	  END IF;

END $$

DELIMITER ;

DELETE FROM menu_transaction WHERE BOOKING_NO=19;
DELETE FROM employee_booking WHERE BOOKING_NO=19;

DELETE FROM menu_transaction WHERE BOOKING_NO=464;
DELETE FROM employee_booking WHERE BOOKING_NO=464;

DELETE FROM menu_transaction WHERE BOOKING_NO=413;
DELETE FROM employee_booking WHERE BOOKING_NO=413;

DELETE FROM menu_transaction WHERE BOOKING_NO=586;
DELETE FROM employee_booking WHERE BOOKING_NO=586;

DELETE FROM menu_transaction WHERE BOOKING_NO=606;
DELETE FROM employee_booking WHERE BOOKING_NO=606;

DELETE FROM menu_transaction WHERE BOOKING_NO=619;
DELETE FROM employee_booking WHERE BOOKING_NO=619;

ALTER TABLE `cms_data`.`employee_booking` DROP INDEX `EBUK`;

ALTER TABLE employee_booking
ADD CONSTRAINT EBUK UNIQUE (EMPLOYEE_CODE,MENU_CODE,BOOKING_DATE);

DELIMITER $$

DROP PROCEDURE IF EXISTS `EMPLOYEE_BOOKING_INSUPDEL` $$
CREATE PROCEDURE `EMPLOYEE_BOOKING_INSUPDEL`(
              IN BN BIGINT(20),
              IN EC VARCHAR(25),
              IN OC VARCHAR(12),
			  IN MC VARCHAR(12),
				      IN SC VARCHAR(12),
              IN WD CHAR(3),
              IN BO VARCHAR(10),
              IN DT CHAR(1),
              IN BD DATE,
              IN BT DECIMAL(4,2),
              IN QT DECIMAL(5,2),
			        IN FLAG INTEGER(1)
              )
BEGIN
    DECLARE COUNTER INTEGER;
    DECLARE BS DECIMAL(4,2);
    DECLARE BE DECIMAL(4,2);
    DECLARE SR DECIMAL(5,2);
    DECLARE NR DECIMAL(5,2);
    DECLARE BR CHAR(1);
    DECLARE UT VARCHAR(25);

    DECLARE CB DECIMAL(10,2);

    DECLARE BOOKINGNO BIGINT(20);
    DECLARE EMPLOYEECODE VARCHAR(25);
    DECLARE C CHAR(1);
    DECLARE E CHAR(1);

    DECLARE MENU_DETAIL_ERROR CONDITION FOR SQLSTATE '99001';
    DECLARE BOOKING_NOT_REQUIRED_ERROR CONDITION FOR SQLSTATE '99002';
    DECLARE CURRENT_BALANCE_ERROR CONDITION FOR SQLSTATE '99003';
    DECLARE BOOKING_TYPE_ERROR CONDITION FOR SQLSTATE '99004';
    DECLARE GUEST_BOOKING_ERROR CONDITION FOR SQLSTATE '99005';
    DECLARE DEDUCT_ERROR CONDITION FOR SQLSTATE '99006';
	  DECLARE BOOKING_DATE_ERROR CONDITION FOR SQLSTATE '99007';

    DECLARE BOOKING_TIME_ERROR CONDITION FOR SQLSTATE '99008';
    DECLARE EMPLOYEE_CODE_ERROR CONDITION FOR SQLSTATE '99009';
    DECLARE CANCELLED_ERROR CONDITION FOR SQLSTATE '99010';
    DECLARE EXECUTED_ERROR CONDITION FOR SQLSTATE '99011';

    DECLARE CONTINUE HANDLER FOR MENU_DETAIL_ERROR
    RESIGNAL SET MESSAGE_TEXT = 'Menu Detail For This Menu,Shift And Weekday Has Not Been Created.';

    DECLARE CONTINUE HANDLER FOR BOOKING_NOT_REQUIRED_ERROR
    RESIGNAL SET MESSAGE_TEXT = 'Booking For This Menu Is Not Required.';

    DECLARE CONTINUE HANDLER FOR CURRENT_BALANCE_ERROR
    RESIGNAL SET MESSAGE_TEXT = 'Current Balance In Wallet Of This Employee Is Low.';

    DECLARE CONTINUE HANDLER FOR BOOKING_TYPE_ERROR
    RESIGNAL SET MESSAGE_TEXT = 'Valid Values For Booking Type Are:NORMAL And GUEST.';

    DECLARE CONTINUE HANDLER FOR GUEST_BOOKING_ERROR
    RESIGNAL SET MESSAGE_TEXT = 'Only User Of HOD Type Can Do Guest Booking.';

    DECLARE CONTINUE HANDLER FOR DEDUCT_ERROR
    RESIGNAL SET MESSAGE_TEXT = 'Valid Values For Deduct Are:Y And N.';

    DECLARE CONTINUE HANDLER FOR BOOKING_DATE_ERROR
    RESIGNAL SET MESSAGE_TEXT = 'Booking Date Should Not Be After Current Date.';

    DECLARE CONTINUE HANDLER FOR BOOKING_TIME_ERROR
    RESIGNAL SET MESSAGE_TEXT = 'Booking Time Is Outside The Valid Time Period.';

    DECLARE CONTINUE HANDLER FOR EMPLOYEE_CODE_ERROR
    RESIGNAL SET MESSAGE_TEXT = 'Employee Code Should Not Be Edited.';

    DECLARE CONTINUE HANDLER FOR CANCELLED_ERROR
    RESIGNAL SET MESSAGE_TEXT = 'This Booking Has Been Cancelled.';

    DECLARE CONTINUE HANDLER FOR EXECUTED_ERROR
    RESIGNAL SET MESSAGE_TEXT = 'This Booking Has Been Executed.';

    SELECT CURRENT_BALANCE INTO CB
    FROM employee_master
    WHERE EMPLOYEE_CODE=EC;

    SELECT COUNT(*) INTO COUNTER
    FROM menu_detail
    WHERE MENU_CODE=MC AND SHIFT_CODE=UPPER(SC) AND WEEKDAY=UPPER(WD) AND VALID IN ('Y');

    IF COUNTER > 0 THEN
      SELECT BOOKING_START,BOOKING_END,SUBSIDIZED_RATE,NORMAL_RATE,BOOKING_REQUIRED
      INTO BS,BE,SR,NR,BR
      FROM menu_detail
      WHERE MENU_CODE=MC AND SHIFT_CODE=UPPER(SC) AND WEEKDAY=UPPER(WD) AND VALID IN ('Y');
    END IF;

    SELECT USER_TYPE INTO UT
    FROM user_master
    WHERE USER_ID=EC;

    IF COUNTER <= 0 THEN
      SIGNAL MENU_DETAIL_ERROR;
    ELSEIF UPPER(BO) NOT IN ('NORMAL','GUEST') THEN
      SIGNAL BOOKING_TYPE_ERROR;
    ELSEIF BD > DATE(NOW()) THEN
      SIGNAL BOOKING_DATE_ERROR;
    ELSEIF BT < BS OR BT > BE THEN
      SIGNAL BOOKING_TIME_ERROR;
    ELSEIF UPPER(BO) IN ('GUEST') AND UPPER(UT) NOT IN ('HOD') THEN
      SIGNAL GUEST_BOOKING_ERROR;
    END IF;

  	IF FLAG = -1 THEN
       SELECT GENERATE_PRIMARY_KEY('employee_booking') INTO BOOKINGNO;

      IF UPPER(BO) IN ('NORMAL') THEN
         IF SR > CB THEN
            SIGNAL CURRENT_BALANCE_ERROR;
         ELSE
           INSERT INTO employee_booking
           VALUES(BOOKINGNO,EC,OC,MC,UPPER(SC),UPPER(WD),UPPER(BO),UPPER(DT),BD,BT,SR,1,SR,'N',NULL,NULL,'N',NULL);

           UPDATE employee_master
           SET CURRENT_BALANCE = CURRENT_BALANCE - SR
           WHERE EMPLOYEE_CODE=EC;
        END IF;
      ELSE
        IF UPPER(DT) IN ('Y') THEN
          IF (NR * QT) > CB THEN
            SIGNAL CURRENT_BALANCE_ERROR;
          ELSE
             INSERT INTO employee_booking
             VALUES(BOOKINGNO,EC,OC,MC,UPPER(SC),UPPER(WD),UPPER(BO),UPPER(DT),BD,BT,NR,QT,(NR * QT),'N',NULL,NULL,'N',NULL);

             UPDATE employee_master
             SET CURRENT_BALANCE = CURRENT_BALANCE - (NR * QT)
             WHERE EMPLOYEE_CODE=EC;
          END IF;
        ELSE
          INSERT INTO employee_booking
          VALUES(BOOKINGNO,EC,OC,MC,UPPER(SC),UPPER(WD),UPPER(BO),UPPER(DT),BD,BT,NR,QT,(NR * QT),'N',NULL,NULL,'N');
        END IF;
      END IF;
    END IF;

  	/*IF FLAG = 0 THEN
      SELECT EMPLOYEE_CODE,CANCELLED,EXECUTED
      INTO EMPLOYEECODE,C,E
      FROM employee_booking
      WHERE BOOKING_NO=BN;

      IF EC <> EMPLOYEECODE THEN
        SIGNAL EMPLOYEE_CODE_ERROR;
      ELSEIF C IN ('Y') THEN
        SIGNAL CANCELLED_ERROR;
      ELSEIF E IN ('Y') THEN
        SIGNAL EXECUTED_ERROR;
      ELSE
        IF UPPER(BE) IN ('NORMAL') THEN
          UPDATE employee_booking
		      SET EMPLOYEE_CODE=EC,MENU_CODE=MC,SHIFT_CODE=UPPER(SC),WEEKDAY=UPPER(WD),BOOKING_TYPE=UPPER(BE),
          BOOKING_DATE=BD,BOOKING_TIME=BT,RATE=SR,QUANTITY=1,AMOUNT=SR
          WHERE BOOKING_NO=BN;
        ELSE
          UPDATE employee_booking
		      SET EMPLOYEE_CODE=EC,MENU_CODE=MC,SHIFT_CODE=UPPER(SC),WEEKDAY=UPPER(WD),BOOKING_TYPE=UPPER(BE),
          BOOKING_DATE=BD,BOOKING_TIME=BT,RATE=NR,QUANTITY=QT,AMOUNT=(NR * QT)
          WHERE BOOKING_NO=BN;
        END IF;
      END IF;
  	END IF;*/

  	IF FLAG = 1 THEN
      SELECT CANCELLED,EXECUTED
      INTO C,E
      FROM employee_booking
      WHERE BOOKING_NO=BN;

      IF C IN ('Y') THEN
        SIGNAL CANCELLED_ERROR;
      ELSEIF E IN ('Y') THEN
        SIGNAL EXECUTED_ERROR;
      ELSE
        IF UPPER(BO) IN ('NORMAL') THEN
          UPDATE employee_master
          SET CURRENT_BALANCE = CURRENT_BALANCE + SR
          WHERE EMPLOYEE_CODE=EC;
        ELSE
          IF UPPER(DT) IN ('Y') THEN
            UPDATE employee_master
            SET CURRENT_BALANCE = CURRENT_BALANCE + (NR * QT)
            WHERE EMPLOYEE_CODE=EC;
          END IF;
        END IF;

       DELETE FROM employee_booking WHERE BOOKING_NO=BN;
      END IF;
  	END IF;

END $$

DELIMITER ;

DELETE FROM organization_wise_employee;

DELETE FROM wallet_transaction WHERE TRANSACTION_NO='138';

DELETE FROM employee_master WHERE EMPLOYER_CODE NOT IN ('EC/1901','EC/1902');